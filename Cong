package com.rbs.bdd.infrastructure.soap.api;

import com.rbs.bdd.application.port.in.PaymentValidationPort;
import com.rbs.bdd.generated.ResponseHeader;
import com.rbs.bdd.generated.ValidateArrangementForPaymentContent;
import com.rbs.bdd.generated.ValidateArrangementForPaymentRequest;
import com.rbs.bdd.generated.ValidateArrangementForPaymentResponse;
import jakarta.xml.bind.JAXBElement;

import jakarta.xml.ws.handler.soap.SOAPMessageContext;
import lombok.RequiredArgsConstructor;
import org.springframework.ws.WebServiceMessage;
import org.springframework.ws.context.MessageContext;
import org.springframework.ws.server.endpoint.annotation.Endpoint;
import org.springframework.ws.server.endpoint.annotation.PayloadRoot;
import org.springframework.ws.server.endpoint.annotation.RequestPayload;
import org.springframework.ws.server.endpoint.annotation.ResponsePayload;

import javax.xml.namespace.QName;
import javax.xml.transform.Source;

@Endpoint

public class PaymentValidationSoapAdapter {

    private static final String NAMESPACE_URI = "http://com/rbsg/soa/C040PaymentManagement/ArrValidationForPayment/V01/ServiceParameters/V01/";

    public PaymentValidationSoapAdapter(PaymentValidationPort paymentValidationPort) {
        this.paymentValidationPort = paymentValidationPort;
    }

    private final PaymentValidationPort paymentValidationPort;


    //Approach 1
    @PayloadRoot(namespace = NAMESPACE_URI, localPart = "validateArrangementForPayment")
    public Source validateArrangementForPayment(@RequestPayload ValidateArrangementForPaymentRequest request,
                                                MessageContext context) {
        System.out.println("The request is here ") ;

        return paymentValidationPort.validateArrangementForPayment(request);
         }

}



--------------------------------------------------------------

package com.rbs.bdd.infrastructure.config;

import ch.qos.logback.core.CoreConstants;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.web.servlet.ServletRegistrationBean;
import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.io.ClassPathResource;
import org.springframework.ws.config.annotation.EnableWs;
import org.springframework.ws.config.annotation.WsConfigurerAdapter;
import org.springframework.ws.server.EndpointInterceptor;

import org.springframework.ws.server.endpoint.adapter.DefaultMethodEndpointAdapter;
import org.springframework.ws.server.endpoint.adapter.method.SourcePayloadMethodProcessor;
import org.springframework.ws.soap.server.endpoint.interceptor.PayloadValidatingInterceptor;
import org.springframework.ws.transport.http.MessageDispatcherServlet;
import org.springframework.ws.wsdl.wsdl11.DefaultWsdl11Definition;
import org.springframework.xml.xsd.SimpleXsdSchema;
import org.springframework.xml.xsd.commons.CommonsXsdSchemaCollection;
import org.springframework.xml.xsd.XsdSchema;
import org.springframework.xml.xsd.XsdSchemaCollection;

import java.util.Collections;
import java.util.List;
@Configuration
@EnableWs
public class SoapWebServiceConfig extends WsConfigurerAdapter {


    @Bean
    public DefaultMethodEndpointAdapter methodEndpointAdapter()
    {
        DefaultMethodEndpointAdapter adapter= new DefaultMethodEndpointAdapter();
        adapter.setMethodReturnValueHandlers(List.of(new SourcePayloadMethodProcessor()));

        return adapter;
    }
    @Bean
    public ServletRegistrationBean<MessageDispatcherServlet> messageDispatcherServlet(ApplicationContext context) {
        MessageDispatcherServlet servlet = new MessageDispatcherServlet();
        servlet.setApplicationContext(context);
        servlet.setTransformWsdlLocations(true);
        return new ServletRegistrationBean<>(servlet, "/ws/*");
    }


    @Override
    public void addInterceptors(List<EndpointInterceptor> interceptors) {
        PayloadValidatingInterceptor validatingInterceptor = new PayloadValidatingInterceptor();
        validatingInterceptor.setValidateRequest(true);
        validatingInterceptor.setValidateResponse(false);
        try {
            validatingInterceptor.setXsdSchemaCollection(updateContactXsd());
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        interceptors.add(validatingInterceptor);
    }



    @Bean(name="ArrValidationForPaymentParameters")
    public DefaultWsdl11Definition defaultWsdl11Definition() throws Exception {
        DefaultWsdl11Definition wsdl11Definition = new DefaultWsdl11Definition();
        wsdl11Definition.setPortTypeName("IArrValidationForPayment");
        wsdl11Definition.setLocationUri("/ws");
        wsdl11Definition.setTargetNamespace("http://com/rbsg/soa/C040PaymentManagement/ArrValidationForPayment/V01/ServiceParameters/V01/");
        wsdl11Definition.setSchemaCollection(updateContactXsd());
        return wsdl11Definition;
    }

    @Bean
    public XsdSchemaCollection updateContactXsd() throws Exception {
        CommonsXsdSchemaCollection xsd = new CommonsXsdSchemaCollection(new ClassPathResource("xsd/ArrValidationForPaymentParameters.xsd"));
        xsd.setInline(true);
        return xsd;
    }
}


------------------------------------------------------------------

package com.rbs.bdd.application.service;

import com.rbs.bdd.application.port.out.AccountValidationPort;
import com.rbs.bdd.application.port.in.PaymentValidationPort;
import com.rbs.bdd.generated.ValidateArrangementForPaymentRequest;
import com.rbs.bdd.generated.ValidateArrangementForPaymentResponse;
import com.rbs.bdd.infrastructure.soap.adapter.StaticResponseLoader;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.springframework.ws.WebServiceMessage;

import javax.xml.transform.Source;
import javax.xml.transform.stream.StreamSource;
import java.io.InputStream;

@Service
@RequiredArgsConstructor
public class PaymentOrchestrator implements PaymentValidationPort {

    private final AccountValidationPort accountValidationPort;


     /* private final CustomerRetrievalService customerRetrievalService;

   @Override
    public RetrieveCustomerResponse retrieveCustomer(RetrieveCustomerRequest request) {
        return customerRetrievalService.retrieveCustomer(request);
    }*/




    //Approach 1
    @Override
    public Source validateArrangementForPayment(ValidateArrangementForPaymentRequest request) {
        accountValidationPort.validateSchema(request);
         return accountValidationPort.validateBusinessRules(request);
    }

}

------------------------------------------------------------


package com.rbs.bdd.application.service;

import com.rbs.bdd.application.exception.SchemaValidationException;
import com.rbs.bdd.application.port.out.AccountValidationPort;
import com.rbs.bdd.generated.ValidateArrangementForPaymentRequest;
import com.rbs.bdd.infrastructure.soap.model.Envelope;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.springframework.ws.WebServiceMessage;
import org.springframework.ws.soap.saaj.SaajSoapMessage;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.Marshaller;
import javax.xml.transform.Source;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.stream.StreamSource;
import javax.xml.transform.stream.StreamResult;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.InputStream;

@Service
@RequiredArgsConstructor
public class AccountValidationService implements AccountValidationPort {

    @Override
    public void validateSchema(ValidateArrangementForPaymentRequest request) {
        System.out.println("Schema validated by Spring WS.");
    }



    @Override
    public Source validateBusinessRules(ValidateArrangementForPaymentRequest request) {
        try {
            // 1. Load the static SOAP response XML from resources
            InputStream xml = getClass().getClassLoader().getResourceAsStream("static-response/response1.xml");
            if (xml == null) {
                throw new SchemaValidationException("File static-response/response1.xml not found.");
            }

            // 2. Unmarshal to Envelope (your JAXB-wrapped SOAP object)
            JAXBContext context = JAXBContext.newInstance(Envelope.class);
            Envelope envelope = (Envelope) context.createUnmarshaller().unmarshal(xml);

            // 3. Apply business logic (if operatingBrand is ALL, modify systemId and transactionId)
            String brand = request.getRequestHeader().getOperatingBrand();
            if ("ALL".equalsIgnoreCase(brand)) {
                envelope.getBody()
                        .getValidateArrangementForPaymentResponse()
                        .getResponse()
                        .getResponseHeader()
                        .getResponseId()
                        .setSystemId("ModifiedESP");

                envelope.getBody()
                        .getValidateArrangementForPaymentResponse()
                        .getResponse()
                        .getResponseHeader()
                        .getResponseId()
                        .setTransactionId("ModifiedTxn123");
            }

            // 4. Marshal back to byte stream
            ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
            Marshaller marshaller = context.createMarshaller();
            marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE);
            marshaller.marshal(envelope, outputStream);

            // 5. Return as a Source (SOAP envelope preserved, no Spring wrapping)
            return new StreamSource(new ByteArrayInputStream(outputStream.toByteArray()));

        } catch (Exception e) {
            throw new SchemaValidationException("Failed to generate SOAP response", e);
        }
    }
};

----------------------------------------------------------


package com.rbs.bdd.application.port.out;

import com.rbs.bdd.generated.ValidateArrangementForPaymentRequest;
import org.springframework.ws.WebServiceMessage;

import javax.xml.transform.Source;

public interface AccountValidationPort {
    void validateSchema(ValidateArrangementForPaymentRequest request);

    //Approach 1
    Source validateBusinessRules(ValidateArrangementForPaymentRequest request);

     }



----------------------------------------------------------------

package com.rbs.bdd.application.port.in;

import com.rbs.bdd.generated.ValidateArrangementForPaymentRequest;
import com.rbs.bdd.generated.ValidateArrangementForPaymentResponse;
import org.springframework.ws.WebServiceMessage;

import javax.xml.transform.Source;

public interface PaymentValidationPort {


    //Approach 1
    Source validateArrangementForPayment(ValidateArrangementForPaymentRequest request);

    // CustomerEnrichmentResponse retrieveCustomer(CustomerEnrichmentRequest request);

}

<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:v01="http://com/rbsg/soa/C040PaymentManagement/ArrValidationForPayment/V01/">
   <soapenv:Header/>
   <soapenv:Body>
      <v01:validateArrangementForPayment>
         <requestHeader>
            <operatingBrand>ALL</operatingBrand>
            <!--Zero or more repetitions:-->
            <requestIds>
               <systemId>RequestID</systemId>
               <transactionId>123456789</transactionId>
            </requestIds>
            <cmdType>Request</cmdType>
         </requestHeader>
         <arrangementIdentifier>
            <identifier>GB79RBOS16005812345670</identifier>
            <context>
               <schemeName>ArrangementEnterpriseIdType</schemeName>
               <codeValue>InternationalBankAccountNumber</codeValue>
            </context>
         </arrangementIdentifier>
      </v01:validateArrangementForPayment>
   </soapenv:Body>
</soapenv:Envelope>

---------------------------------------------------------------

package com.rbs.bdd.application.service;

import com.rbs.bdd.application.exception.SchemaValidationException;
import com.rbs.bdd.generated.ObjectFactory;
import com.rbs.bdd.generated.RequestHeader;
import com.rbs.bdd.generated.ValidateArrangementForPaymentRequest;
import jakarta.xml.soap.MessageFactory;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.ws.soap.saaj.SaajSoapMessage;
import org.springframework.ws.WebServiceMessage;


import static org.junit.jupiter.api.Assertions.*;
class AccountValidationServiceTest {

    private AccountValidationService service;

    @BeforeEach
    void setup() {
        service = new AccountValidationService();
    }

    @Test
    void shouldThrowExceptionIfXmlMissing() {
        ValidateArrangementForPaymentRequest request = new ObjectFactory().createValidateArrangementForPaymentRequest();
        WebServiceMessage mockMessage = createEmptySoapMessage();

        assertThrows(SchemaValidationException.class, () ->
                service.validateBusinessRules(request, mockMessage)
        );
    }

    @Test
    void shouldLogModifiedResponseSuccessfully() {
        // Pre-load your response1.xml in test/resources/static-response
        ValidateArrangementForPaymentRequest request = new ValidateArrangementForPaymentRequest();
        RequestHeader header = new RequestHeader();
        header.setOperatingBrand("ALL");
        request.setRequestHeader(header);

        WebServiceMessage message = createEmptySoapMessage();
        assertDoesNotThrow(() -> service.validateBusinessRules(request, message));
    }

    private WebServiceMessage createEmptySoapMessage() {
        try {
            return new SaajSoapMessage(MessageFactory.newInstance().createMessage());
        } catch (Exception e) {
            throw new RuntimeException("Failed to create test SOAP message", e);
        }
    }


}

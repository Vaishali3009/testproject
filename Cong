package com.rbs.bdd.application.service;

import com.rbs.bdd.application.exception.SchemaValidationException;
import com.rbs.bdd.application.port.out.AccountValidationPort;
import com.rbs.bdd.generated.ValidateArrangementForPaymentRequest;
import com.rbs.bdd.infrastructure.soap.model.Envelope;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.springframework.ws.soap.saaj.SaajSoapMessage;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.Marshaller;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.stream.StreamSource;
import javax.xml.transform.stream.StreamResult;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.InputStream;

@Service
@RequiredArgsConstructor
public class AccountValidationService implements AccountValidationPort {

    @Override
    public void validateSchema(ValidateArrangementForPaymentRequest request) {
        System.out.println("Schema validated by Spring WS.");
    }

    @Override
    public javax.xml.transform.Source validateBusinessRules(ValidateArrangementForPaymentRequest request) {
        try {
            // 1. Load the static SOAP response XML from resources
            InputStream xml = getClass().getClassLoader().getResourceAsStream("static-response/response1.xml");
            if (xml == null) {
                throw new SchemaValidationException("File static-response/response1.xml not found.");
            }

            // 2. Unmarshal to Envelope (your JAXB-wrapped SOAP object)
            JAXBContext context = JAXBContext.newInstance(Envelope.class);
            Envelope envelope = (Envelope) context.createUnmarshaller().unmarshal(xml);

            // 3. Apply business logic (if operatingBrand is ALL, modify systemId and transactionId)
            String brand = request.getRequestHeader().getOperatingBrand();
            if ("ALL".equalsIgnoreCase(brand)) {
                envelope.getBody()
                        .getValidateArrangementForPaymentResponse()
                        .getResponse()
                        .getResponseHeader()
                        .getResponseId()
                        .setSystemId("ModifiedESP");

                envelope.getBody()
                        .getValidateArrangementForPaymentResponse()
                        .getResponse()
                        .getResponseHeader()
                        .getResponseId()
                        .setTransactionId("ModifiedTxn123");
            }

            // 4. Marshal back to byte stream
            ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
            Marshaller marshaller = context.createMarshaller();
            marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE);
            marshaller.marshal(envelope, outputStream);

            // 5. Return as a Source (SOAP envelope preserved, no Spring wrapping)
            return new StreamSource(new ByteArrayInputStream(outputStream.toByteArray()));

        } catch (Exception e) {
            throw new SchemaValidationException("Failed to generate SOAP response", e);
        }
    }
}

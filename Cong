package com.rbs.bdd.application.port.in;

import com.rbs.bdd.generated.ValidateArrangementForPaymentRequest;
import com.rbs.bdd.generated.ValidateArrangementForPaymentResponse;
import org.springframework.ws.WebServiceMessage;

import javax.xml.transform.Source;

public interface PaymentValidationPort {


    //Approach 1
    void validateArrangementForPayment(ValidateArrangementForPaymentRequest request,WebServiceMessage meesage);

    // CustomerEnrichmentResponse retrieveCustomer(CustomerEnrichmentRequest request);

}


---------------------------------------------------


package com.rbs.bdd.application.port.out;

import com.rbs.bdd.generated.ValidateArrangementForPaymentRequest;
import org.springframework.ws.WebServiceMessage;

import javax.xml.transform.Source;

public interface AccountValidationPort {
    void validateSchema(ValidateArrangementForPaymentRequest request);

    //Approach 1
    void validateBusinessRules(ValidateArrangementForPaymentRequest request,WebServiceMessage message);

     }


--------------------------------------------------------------


package com.rbs.bdd.application.service;


import com.rbs.bdd.application.exception.SchemaValidationException;
import com.rbs.bdd.application.port.out.AccountValidationPort;
import com.rbs.bdd.generated.*;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.springframework.ws.WebServiceMessage;
import org.springframework.ws.soap.saaj.SaajSoapMessage;
import org.w3c.dom.Document;
import org.w3c.dom.Node;


import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import javax.xml.transform.stream.StreamSource;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathFactory;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.InputStream;
import java.lang.Exception;

@Service
@RequiredArgsConstructor
public class AccountValidationService implements AccountValidationPort {

    @Override
    public void validateSchema(ValidateArrangementForPaymentRequest request) {
        // Schema is validated automatically by Spring WS
        System.out.println("Schema Validation ");
    }

    //Approach 1
        @Override
        public void validateBusinessRules(ValidateArrangementForPaymentRequest request, WebServiceMessage message) {
            try {
                InputStream xml = getClass().getClassLoader().getResourceAsStream("static-response/response1.xml");
                if (xml == null) {
                    throw new SchemaValidationException("response1.xml not found in classpath");
                }

                DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
                factory.setNamespaceAware(true);
                DocumentBuilder builder = factory.newDocumentBuilder();
                Document doc = builder.parse(xml);

                XPath xpath = XPathFactory.newInstance().newXPath();

                // Update systemId
                Node systemId = (Node) xpath.evaluate(
                        "//*[local-name()='responseId']/*[local-name()='systemId']", doc, XPathConstants.NODE);
                if (systemId != null) systemId.setTextContent("ModifiedESP");

                // Update transactionId
                Node transactionId = (Node) xpath.evaluate(
                        "//*[local-name()='responseId']/*[local-name()='transactionId']", doc, XPathConstants.NODE);
                if (transactionId != null) transactionId.setTextContent("ModifiedTxn123");

                ByteArrayOutputStream rawOutput= new ByteArrayOutputStream();
                Transformer transformer = TransformerFactory.newInstance().newTransformer();
                transformer.transform(new DOMSource(doc),new StreamResult(rawOutput));


                SaajSoapMessage soapMessage= (SaajSoapMessage) message;
                soapMessage.getSaajMessage().getSOAPPart().setContent(
                        new StreamSource(new ByteArrayInputStream(rawOutput.toByteArray()))
                );

            } catch (Exception e) {
                throw new SchemaValidationException("Error processing response XML", e);
            }
        }
    }



------------------------------------------------------


package com.rbs.bdd.application.service;

import com.rbs.bdd.application.port.out.AccountValidationPort;
import com.rbs.bdd.application.port.in.PaymentValidationPort;
import com.rbs.bdd.generated.ValidateArrangementForPaymentRequest;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.springframework.ws.WebServiceMessage;

@Service
@RequiredArgsConstructor
public class PaymentOrchestrator implements PaymentValidationPort {

    private final AccountValidationPort accountValidationPort;


     /* private final CustomerRetrievalService customerRetrievalService;

   @Override
    public RetrieveCustomerResponse retrieveCustomer(RetrieveCustomerRequest request) {
        return customerRetrievalService.retrieveCustomer(request);
    }*/
    
    @Override
    public void validateArrangementForPayment(ValidateArrangementForPaymentRequest request,WebServiceMessage message) {
        accountValidationPort.validateSchema(request);
         accountValidationPort.validateBusinessRules(request,message);
    }

}


-----------------------------------------------------


package com.rbs.bdd.infrastructure.config;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.ws.context.MessageContext;
import org.springframework.ws.server.EndpointInterceptor;

import java.io.ByteArrayOutputStream;

public class SoapLoggingInterceptor implements EndpointInterceptor {

    private static final Logger logger = LoggerFactory.getLogger(SoapLoggingInterceptor.class);

    @Override
    public boolean handleRequest(MessageContext messageContext, Object endpoint) {
        logMessage("SOAP Request", messageContext.getRequest());
        return true;
    }

    @Override
    public boolean handleResponse(MessageContext messageContext, Object endpoint) {
        logMessage("SOAP Response", messageContext.getResponse());
        return true;
    }

    @Override
    public boolean handleFault(MessageContext messageContext, Object endpoint) {
        logMessage("SOAP Fault", messageContext.getResponse());
        return true;
    }

    @Override
    public void afterCompletion(MessageContext messageContext, Object endpoint, Exception ex) {
        // No action needed
    }

    private void logMessage(String type, org.springframework.ws.WebServiceMessage message) {
        try {
            ByteArrayOutputStream out = new ByteArrayOutputStream();
            message.writeTo(out);
            logger.info("{}:\n{}", type, out.toString());
        } catch (Exception e) {
            logger.error("Error logging {} message: {}", type, e.getMessage());
        }
    }
}


-----------------------------------------


package com.rbs.bdd.infrastructure.config;

import ch.qos.logback.core.CoreConstants;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.web.servlet.ServletRegistrationBean;
import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.io.ClassPathResource;
import org.springframework.ws.config.annotation.EnableWs;
import org.springframework.ws.config.annotation.WsConfigurerAdapter;
import org.springframework.ws.server.EndpointInterceptor;

import org.springframework.ws.server.endpoint.adapter.DefaultMethodEndpointAdapter;
import org.springframework.ws.server.endpoint.adapter.method.SourcePayloadMethodProcessor;
import org.springframework.ws.soap.server.endpoint.interceptor.PayloadValidatingInterceptor;
import org.springframework.ws.transport.http.MessageDispatcherServlet;
import org.springframework.ws.wsdl.wsdl11.DefaultWsdl11Definition;
import org.springframework.xml.xsd.SimpleXsdSchema;
import org.springframework.xml.xsd.commons.CommonsXsdSchemaCollection;
import org.springframework.xml.xsd.XsdSchema;
import org.springframework.xml.xsd.XsdSchemaCollection;

import java.util.Collections;
import java.util.List;
@Configuration
@EnableWs
public class SoapWebServiceConfig extends WsConfigurerAdapter {

//
//    @Bean
//    public DefaultMethodEndpointAdapter methodEndpointAdapter()
//    {
//        DefaultMethodEndpointAdapter adapter= new DefaultMethodEndpointAdapter();
//        adapter.setMethodReturnValueHandlers(List.of(new SourcePayloadMethodProcessor()));
//
//        return adapter;
//    }
    @Bean
    public ServletRegistrationBean<MessageDispatcherServlet> messageDispatcherServlet(ApplicationContext context) {
        MessageDispatcherServlet servlet = new MessageDispatcherServlet();
        servlet.setApplicationContext(context);
        servlet.setTransformWsdlLocations(true);
        return new ServletRegistrationBean<>(servlet, "/ws/*");
    }


    @Override
    public void addInterceptors(List<EndpointInterceptor> interceptors) {
        PayloadValidatingInterceptor validatingInterceptor = new PayloadValidatingInterceptor();
        validatingInterceptor.setValidateRequest(true);
        validatingInterceptor.setValidateResponse(false);
        try {
            validatingInterceptor.setXsdSchemaCollection(updateContactXsd());
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        interceptors.add(validatingInterceptor);
    }



    @Bean(name="ArrValidationForPaymentParameters")
    public DefaultWsdl11Definition defaultWsdl11Definition() throws Exception {
        DefaultWsdl11Definition wsdl11Definition = new DefaultWsdl11Definition();
        wsdl11Definition.setPortTypeName("IArrValidationForPayment");
        wsdl11Definition.setLocationUri("/ws");
       // wsdl11Definition.setTargetNamespace("http://com/rbsg/soa/C040PaymentManagement/ArrValidationForPayment/V01/ServiceParameters/V01/");
        wsdl11Definition.setTargetNamespace("http://com/rbsg/soa/C040PaymentManagement/ArrValidationForPayment/V01/");
        wsdl11Definition.setSchemaCollection(updateContactXsd());
        return wsdl11Definition;
    }

    @Bean
    public XsdSchemaCollection updateContactXsd() throws Exception {
        CommonsXsdSchemaCollection xsd = new CommonsXsdSchemaCollection(new ClassPathResource("xsd/ArrValidationForPaymentParameters.xsd"));
        xsd.setInline(true);
        return xsd;
    }
}


---------------------------------------------


package com.rbs.bdd.infrastructure.soap.api;

import com.rbs.bdd.application.port.in.PaymentValidationPort;
import com.rbs.bdd.generated.ResponseHeader;
import com.rbs.bdd.generated.ValidateArrangementForPaymentContent;
import com.rbs.bdd.generated.ValidateArrangementForPaymentRequest;
import com.rbs.bdd.generated.ValidateArrangementForPaymentResponse;
import jakarta.xml.bind.JAXBElement;

import jakarta.xml.ws.handler.soap.SOAPMessageContext;
import lombok.RequiredArgsConstructor;
import org.springframework.ws.WebServiceMessage;
import org.springframework.ws.context.MessageContext;
import org.springframework.ws.server.endpoint.annotation.Endpoint;
import org.springframework.ws.server.endpoint.annotation.PayloadRoot;
import org.springframework.ws.server.endpoint.annotation.RequestPayload;
import org.springframework.ws.server.endpoint.annotation.ResponsePayload;

import javax.xml.namespace.QName;
import javax.xml.transform.Source;

@Endpoint

public class PaymentValidationSoapAdapter {

    /**Changes for the request*/
   // private static final String NAMESPACE_URI = "http://com/rbsg/soa/C040PaymentManagement/ArrValidationForPayment/V01/ServiceParameters/V01/";

    private static final String NAMESPACE_URI = "http://com/rbsg/soa/C040PaymentManagement/ArrValidationForPayment/V01/";

    public PaymentValidationSoapAdapter(PaymentValidationPort paymentValidationPort) {
        this.paymentValidationPort = paymentValidationPort;
    }

    private final PaymentValidationPort paymentValidationPort;


    //Approach 1
    @PayloadRoot(namespace = NAMESPACE_URI, localPart = "validateArrangementForPayment")
    @ResponsePayload
    public void validateArrangementForPayment(@RequestPayload ValidateArrangementForPaymentRequest request,
                                                MessageContext context) {
        System.out.println("The request is here ") ;
        WebServiceMessage response = context.getResponse();
        paymentValidationPort.validateArrangementForPayment(request, response);
         }

}


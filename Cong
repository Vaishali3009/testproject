package com.rbs.bdd.infrastructure.soap.adapter;

import com.rbs.bdd.infrastructure.soap.model.Envelope;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.Unmarshaller;
import java.io.InputStream;

public class XmlUtil {

    public static Envelope loadStaticEnvelopeResponse() {
        try {
            JAXBContext context = JAXBContext.newInstance(Envelope.class);
            Unmarshaller unmarshaller = context.createUnmarshaller();

            InputStream is = XmlUtil.class.getClassLoader()
                    .getResourceAsStream("static-response/response1.xml");

            if (is == null) {
                throw new RuntimeException("Static response XML not found.");
            }

            return (Envelope) unmarshaller.unmarshal(is);

        } catch (Exception e) {
            throw new RuntimeException("Failed to load static SOAP response", e);
        }
    }
}


-------------------------

package com.rbs.bdd.application.service;

import com.rbs.bdd.application.exception.SchemaValidationException;
import com.rbs.bdd.application.port.out.AccountValidationPort;
import com.rbs.bdd.generated.ValidateArrangementForPaymentRequest;
import com.rbs.bdd.infrastructure.soap.adapter.XmlUtil;
import com.rbs.bdd.infrastructure.soap.model.Envelope;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.Marshaller;
import javax.xml.transform.Source;
import javax.xml.transform.stream.StreamSource;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;

@Service
@RequiredArgsConstructor
public class AccountValidationService implements AccountValidationPort {

    @Override
    public void validateSchema(ValidateArrangementForPaymentRequest request) {
        System.out.println("Schema is validated by Spring WS.");
    }

    @Override
    public Source validateBusinessRules(ValidateArrangementForPaymentRequest request) {
        try {
            // Load static response
            Envelope envelope = XmlUtil.loadStaticEnvelopeResponse();

            // Modify fields based on business logic
            if ("ALL".equalsIgnoreCase(request.getRequestHeader().getOperatingBrand())) {
                envelope.getBody().getValidateArrangementForPaymentResponse()
                        .getResponse().getResponseHeader().getResponseId()
                        .setSystemId("ModifiedESP");

                envelope.getBody().getValidateArrangementForPaymentResponse()
                        .getResponse().getResponseHeader().getResponseId()
                        .setTransactionId("ModifiedTxn123");
            }

            // Marshal back to XML
            JAXBContext context = JAXBContext.newInstance(Envelope.class);
            Marshaller marshaller = context.createMarshaller();
            marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE);

            ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
            marshaller.marshal(envelope, outputStream);

            // Return raw SOAP XML without Spring-generated envelope
            return new StreamSource(new ByteArrayInputStream(outputStream.toByteArray()));

        } catch (Exception e) {
            throw new SchemaValidationException("Failed to generate SOAP response", e);
        }
    }
}


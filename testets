 package com.gitlab.test.gitlabmembers.service;

import org.apache.poi.ss.usermodel.*; 
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.stereotype.Service;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.client.RestTemplate;
import org.springframework.http.HttpMethod;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.File;
import java.io.IOException;
import java.util.List;
import java.util.Map;


@Service
public class MemberService {

	private static final String PRIVATE_TOKEN = "glpat-sBJ36gPL6axMRKst6UVd";
	private static final String GITLAB_API_URL = "https://dot-portal.de.pri.o2.com/gitlab/api/v4";
	private static Sheet sheet ;
	
	public List<Map<String, Object>> getGroupMembers(int groupId,String filePath) throws IOException { 
		String url = GITLAB_API_URL + "/groups/" + groupId + "/members?private_token=" + PRIVATE_TOKEN;

		List<Map<String, Object>> members = fetchData(url); 
		exportMembersToExcel(members,filePath,groupId); // Append members to file
		
		/*To fetch Subgroups inside that group*/
		List<Map<String, Object>> submembers=getSubgroupMembers(groupId);
		if(submembers!=null)
		{
			exportMembersToExcel(submembers,filePath,groupId); // Append members to file
		}
		
		return members;
	}

	

    public List<Map<String, Object>> getProjectsUnderGroup(int groupId) {
        String url = GITLAB_API_URL + "/groups/" + groupId + "/projects?private_token=" + PRIVATE_TOKEN;
        return fetchData(url);
    }

    public List<Map<String, Object>> getAllProjectMembers(int groupId,String filePath) {
        List<Map<String, Object>> projects = getProjectsUnderGroup(groupId);
        List<Map<String, Object>> projectMembers=null;
        for (Map<String, Object> project : projects) {
            // Get project ID
            int projectId = (int) project.get("id");
            // Fetch members for the current project
            projectMembers = getProjectMembers(projectId);
            exportMembersToExcel(projectMembers,filePath,groupId); 
        }
        return projects; // Modify this method as per your requirements
    }

    private List<Map<String, Object>> getProjectMembers(int projectId) {
        String url = GITLAB_API_URL + "/projects/" + projectId + "/members?private_token=" + PRIVATE_TOKEN;
        return fetchData(url);
    }


	public List<Map<String, Object>> getSubgroupMembers(int groupId) {
		String url = GITLAB_API_URL + "/groups/" + groupId + "/subgroups?private_token=" + PRIVATE_TOKEN;
		// You need to iterate over subgroups and fetch members, I'll leave this part as an exercise for you
		return null;
	}

	public List<Map<String, Object>> getProjectMembers(int groupId,String filePath) {
		String url = GITLAB_API_URL + "/groups/" + groupId + "/projects?private_token=" + PRIVATE_TOKEN;

		List<Map<String, Object>> members = fetchData(url); 
	//	exportMembersToExcel(members,filePath,groupId); // Append members to file
		return members;
	}

    private void exportMembersToExcel(List<Map<String, Object>> members, String filePath,int groupId) {
    	try (Workbook workbook = openWorkbook(filePath)) {
            Sheet sheet = getOrCreateSheet(workbook, "Members3");
            
            // Fill data rows
            int rowNum = sheet.getLastRowNum() + 1; // Get the next row number to append data
            for (Map<String, Object> member : members) {
                Row row = sheet.createRow(rowNum++);
                row.createCell(0).setCellValue((String) member.get("name"));
                row.createCell(1).setCellValue((String) member.get("state"));
                row.createCell(2).setCellValue((String) member.get("membership_status"));
                row.createCell(3).setCellValue((String) member.get("created_at"));
            }

            // Write the workbook to the file
            try (FileOutputStream fileOut = new FileOutputStream(filePath)) {
                workbook.write(fileOut);
            }
        } catch (Exception e) {
            e.printStackTrace();
            System.out.println("exception is "+e);
        }
    }

    private Workbook openWorkbook(String filePath) throws IOException {
        File file = new File(filePath);
        Workbook workbook;
        if (file.exists()) {
            workbook = WorkbookFactory.create(file);
        } else {
            workbook = new XSSFWorkbook();
        }
        return workbook;
    }

    private Sheet getOrCreateSheet(Workbook workbook, String sheetName) {
        Sheet sheet = workbook.getSheet(sheetName);
        if (sheet == null) {
            sheet = workbook.createSheet(sheetName);
            Row headerRow = sheet.createRow(0);
            headerRow.createCell(0).setCellValue("Name");
            headerRow.createCell(1).setCellValue("State");
            headerRow.createCell(2).setCellValue("Membership Status");
            headerRow.createCell(3).setCellValue("Created At");
        }
        return sheet;
    }


	/*public void exportMembersToExcel(List<Map<String, Object>> members, String filePath,int groupId) throws IOException {
		Workbook workbook = new XSSFWorkbook();
		Sheet sheet = workbook.createSheet("Members");

		// Create header row
		Row headerRow = sheet.createRow(0);
		headerRow.createCell(0).setCellValue("Name");
		headerRow.createCell(1).setCellValue("Status");

		// Fill data rows
		int rowNum = 1;
		for (Map<String, Object> member : members) {
			Row row = sheet.createRow(rowNum++);
			row.createCell(0).setCellValue(groupId);
			row.createCell(0).setCellValue((Integer) member.get("id"));
			row.createCell(1).setCellValue((String) member.get("name"));
			row.createCell(2).setCellValue((String) member.get("state"));
			row.createCell(3).setCellValue((String) member.get("membership_state"));
			row.createCell(4).setCellValue((String) member.get("created_at"));
		}

		// Write the workbook to a file
		try (FileOutputStream fileOut = new FileOutputStream(filePath)) {
			workbook.write(fileOut);
		}

		workbook.close();
	}
*/
	private List<Map<String, Object>> fetchData(String url) {
		RestTemplate restTemplate = new RestTemplate();
		ResponseEntity<List<Map<String, Object>>> responseEntity = restTemplate.exchange(url, HttpMethod.GET, null,
				new ParameterizedTypeReference<List<Map<String, Object>>>() {});
		return responseEntity.getBody();
	}
}

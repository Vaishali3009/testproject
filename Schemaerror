@Configuration
@EnableWs
public class SoapWebServiceConfig extends WsConfigurerAdapter {

    @Bean
    public ServletRegistrationBean<MessageDispatcherServlet> messageDispatcherServlet(ApplicationContext context) {
        MessageDispatcherServlet servlet = new MessageDispatcherServlet();
        servlet.setApplicationContext(context);
        servlet.setTransformWsdlLocations(true);
        return new ServletRegistrationBean<>(servlet, "/ws/*");
    }

    @Bean(name = "arrangementSchema")
    public CommonsXsdSchemaCollection arrangementSchema() {
        return createMergedSchema("xsd/ArrValidationForPaymentParameters.xsd");
    }

    private CommonsXsdSchemaCollection createMergedSchema(String mainXsdPath) {
        CommonsXsdSchemaCollection schemaCollection =
            new CommonsXsdSchemaCollection(new ClassPathResource(mainXsdPath));
        schemaCollection.setInline(true); // <- Merges all imported XSDs into one
        return schemaCollection;
    }

    @Bean(name = "validateArrangementForPayment")
    public DefaultWsdl11Definition defaultWsdl11Definition(@Qualifier("arrangementSchema") CommonsXsdSchemaCollection schemaCollection) {
        DefaultWsdl11Definition definition = new DefaultWsdl11Definition();
        definition.setPortTypeName("ValidateArrangementForPaymentPort");
        definition.setLocationUri("/ws");
        definition.setTargetNamespace("http://com/rbsg/soa/C040PaymentManagement/ArrValidationForPayment/V01/");
        definition.setSchemaCollection(schemaCollection);
        return definition;
    }

    @Override
    public void addInterceptors(List<EndpointInterceptor> interceptors) {
        PayloadValidatingInterceptor validatingInterceptor = new PayloadValidatingInterceptor();
        validatingInterceptor.setValidateRequest(true);
        validatingInterceptor.setValidateResponse(false);
        validatingInterceptor.setXsdSchemaCollection(arrangementSchema());
        interceptors.add(validatingInterceptor);
    }
}

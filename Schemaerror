package com.rbs.bdd.application.port.in;

import com.rbs.bdd.generated.ValidateArrangementForPaymentRequest;
import com.rbs.bdd.generated.ValidateArrangementForPaymentResponse;

public interface PaymentValidationPort {
    ValidateArrangementForPaymentResponse validateArrangementForPayment(ValidateArrangementForPaymentRequest request);
   // CustomerEnrichmentResponse retrieveCustomer(CustomerEnrichmentRequest request);

}



-------------------------------------------------------------------------------------------------


package com.rbs.bdd.application.port.out;

import com.rbs.bdd.generated.ValidateArrangementForPaymentRequest;
import com.rbs.bdd.generated.ValidateArrangementForPaymentResponse;

public interface AccountValidationPort {
    void validateSchema(ValidateArrangementForPaymentRequest request);

    ValidateArrangementForPaymentResponse validateBusinessRules(ValidateArrangementForPaymentRequest request);
}

----------------------------------------------------------------------------------





package com.rbs.bdd.application.service;


import com.rbs.bdd.application.exception.SchemaValidationException;
import com.rbs.bdd.application.port.out.AccountValidationPort;
import com.rbs.bdd.generated.*;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.Unmarshaller;
import java.io.InputStream;
import java.lang.Exception;

@Service
@RequiredArgsConstructor
public class AccountValidationService implements AccountValidationPort {

    @Override
    public void validateSchema(ValidateArrangementForPaymentRequest request) {
        // Schema is validated automatically by Spring WS
        System.out.println("Schema Validation ");
    }

    @Override
    public ValidateArrangementForPaymentResponse validateBusinessRules(ValidateArrangementForPaymentRequest request) {
        try {
            JAXBContext context = JAXBContext.newInstance(ValidateArrangementForPaymentResponse.class);
            Unmarshaller unmarshaller = context.createUnmarshaller();
            InputStream xml = getClass().getClassLoader().getResourceAsStream("static-response/response.xml");
            ValidateArrangementForPaymentResponse response = (ValidateArrangementForPaymentResponse) unmarshaller.unmarshal(xml);

            String operatingBrand = request.getRequestHeader().getOperatingBrand();
            if ("ALL".equalsIgnoreCase(operatingBrand)) {
                ResponseHeader header = response.getResponse().getResponseHeader();
                header.getResponseId().setSystemId("ModifiedESP");
                header.getResponseId().setTransactionId("ModifiedTxn123");
            }

            return response;
        } catch (Exception e) {
            throw new SchemaValidationException("Failed to process static response XML", e);
        }
    }
}



--------------------------------------------------------------------


package com.rbs.bdd.application.service;

public class CustomerRetrievalService {
}




-------------------------------------------------------------------------------


package com.rbs.bdd.application.service;

import com.rbs.bdd.application.port.out.AccountValidationPort;
import com.rbs.bdd.application.port.in.PaymentValidationPort;
import com.rbs.bdd.generated.ValidateArrangementForPaymentRequest;
import com.rbs.bdd.generated.ValidateArrangementForPaymentResponse;
import com.rbs.bdd.infrastructure.soap.adapter.StaticResponseLoader;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

@Service
@RequiredArgsConstructor
public class PaymentOrchestrator implements PaymentValidationPort {

    private final AccountValidationPort accountValidationPort;


    // private final CustomerRetrievalService customerRetrievalService;

    @Override
    public ValidateArrangementForPaymentResponse validateArrangementForPayment(ValidateArrangementForPaymentRequest request) {
        accountValidationPort.validateSchema(request);
        return  accountValidationPort.validateBusinessRules(request);
    }

   // @Override
    //public RetrieveCustomerResponse retrieveCustomer(RetrieveCustomerRequest request) {
      //  return customerRetrievalService.retrieveCustomer(request);
    //}
}


--------------------------------------------------




package com.rbs.bdd.infrastructure.config;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.ws.context.MessageContext;
import org.springframework.ws.server.EndpointInterceptor;

import java.io.ByteArrayOutputStream;

public class SoapLoggingInterceptor implements EndpointInterceptor {

    private static final Logger logger = LoggerFactory.getLogger(SoapLoggingInterceptor.class);

    @Override
    public boolean handleRequest(MessageContext messageContext, Object endpoint) {
        logMessage("SOAP Request", messageContext.getRequest());
        return true;
    }

    @Override
    public boolean handleResponse(MessageContext messageContext, Object endpoint) {
        logMessage("SOAP Response", messageContext.getResponse());
        return true;
    }

    @Override
    public boolean handleFault(MessageContext messageContext, Object endpoint) {
        logMessage("SOAP Fault", messageContext.getResponse());
        return true;
    }

    @Override
    public void afterCompletion(MessageContext messageContext, Object endpoint, Exception ex) {
        // No action needed
    }

    private void logMessage(String type, org.springframework.ws.WebServiceMessage message) {
        try {
            ByteArrayOutputStream out = new ByteArrayOutputStream();
            message.writeTo(out);
            logger.info("{}:\n{}", type, out.toString());
        } catch (Exception e) {
            logger.error("Error logging {} message: {}", type, e.getMessage());
        }
    }
}




-----------------------------------------------------------------------


package com.rbs.bdd.infrastructure.config;

import ch.qos.logback.core.CoreConstants;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.web.servlet.ServletRegistrationBean;
import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.io.ClassPathResource;
import org.springframework.ws.config.annotation.EnableWs;
import org.springframework.ws.config.annotation.WsConfigurerAdapter;
import org.springframework.ws.server.EndpointInterceptor;
import org.springframework.ws.soap.server.endpoint.interceptor.PayloadValidatingInterceptor;
import org.springframework.ws.transport.http.MessageDispatcherServlet;
import org.springframework.ws.wsdl.wsdl11.DefaultWsdl11Definition;
import org.springframework.xml.xsd.SimpleXsdSchema;
import org.springframework.xml.xsd.commons.CommonsXsdSchemaCollection;
import org.springframework.xml.xsd.XsdSchema;
import org.springframework.xml.xsd.XsdSchemaCollection;

import java.util.List;
@Configuration
@EnableWs
public class SoapWebServiceConfig extends WsConfigurerAdapter {

    @Bean
    public ServletRegistrationBean<MessageDispatcherServlet> messageDispatcherServlet(ApplicationContext context) {
        MessageDispatcherServlet servlet = new MessageDispatcherServlet();
        servlet.setApplicationContext(context);
        servlet.setTransformWsdlLocations(true);
        return new ServletRegistrationBean<>(servlet, "/ws/*");
    }

 /*   @Bean(name = "arrangementSchema")
    public XsdSchema arrangementSchema()
    {
      //  return createMergedSchema("xsd/ArrValidationForPaymentParameters.xsd");
        return new SimpleXsdSchema((new ClassPathResource("xsd/ArrValidationForPaymentParameters.xsd")));
    }

    @Bean(name = "validateArrangementForPayment")
    public DefaultWsdl11Definition defaultWsdl11Definition( XsdSchema arrangementSchema) {

        DefaultWsdl11Definition definition = new DefaultWsdl11Definition();
        definition.setPortTypeName("IArrValidationForPayment");
        definition.setLocationUri("/ws");
        definition.setTargetNamespace("http://com/rbsg/soa/C040PaymentManagement/ArrValidationForPayment/V01/ServiceParameters/V01/");
        //definition.setSchemaCollection(schema);
        definition.setSchema(arrangementSchema);
        return definition;
    }
*/



    @Override
    public void addInterceptors(List<EndpointInterceptor> interceptors) {
        PayloadValidatingInterceptor validatingInterceptor = new PayloadValidatingInterceptor();
        validatingInterceptor.setValidateRequest(true);
        validatingInterceptor.setValidateResponse(false);
        try {
            validatingInterceptor.setXsdSchemaCollection(updateContactXsd());
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        interceptors.add(validatingInterceptor);
    }



    @Bean(name="ArrValidationForPaymentParameters")
    public DefaultWsdl11Definition defaultWsdl11Definition() throws Exception {
        DefaultWsdl11Definition wsdl11Definition = new DefaultWsdl11Definition();
        wsdl11Definition.setPortTypeName("IArrValidationForPayment");
        wsdl11Definition.setLocationUri("/ws");
        wsdl11Definition.setTargetNamespace("http://com/rbsg/soa/C040PaymentManagement/ArrValidationForPayment/V01/ServiceParameters/V01/");
        wsdl11Definition.setSchemaCollection(updateContactXsd());
        return wsdl11Definition;
    }

    @Bean
    public XsdSchemaCollection updateContactXsd() throws Exception {
        CommonsXsdSchemaCollection xsd = new CommonsXsdSchemaCollection(new ClassPathResource("xsd/ArrValidationForPaymentParameters.xsd"));
        xsd.setInline(true);
        return xsd;
    }
}



-----------------------------------------------------------

package com.rbs.bdd.infrastructure.soap.adapter;

import com.rbs.bdd.generated.ValidateArrangementForPaymentResponse;
import org.springframework.core.io.ClassPathResource;
import org.springframework.stereotype.Component;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.Unmarshaller;
import java.io.InputStream;

@Component
public class StaticResponseLoader {

    public ValidateArrangementForPaymentResponse loadResponse() {
        try {
            InputStream inputStream = new ClassPathResource("static-response/response.xml").getInputStream();
            JAXBContext context = JAXBContext.newInstance(ValidateArrangementForPaymentResponse.class);
            Unmarshaller unmarshaller = context.createUnmarshaller();
            return (ValidateArrangementForPaymentResponse) unmarshaller.unmarshal(inputStream);
        } catch (Exception e) {
            throw new RuntimeException("Failed to load static response XML", e);
        }
    }
}


----------------------------------------------------------------


package com.rbs.bdd.infrastructure.soap.api;

import com.rbs.bdd.application.port.in.PaymentValidationPort;
import com.rbs.bdd.generated.ResponseHeader;
import com.rbs.bdd.generated.ValidateArrangementForPaymentContent;
import com.rbs.bdd.generated.ValidateArrangementForPaymentRequest;
import com.rbs.bdd.generated.ValidateArrangementForPaymentResponse;
import jakarta.xml.bind.JAXBElement;
import lombok.RequiredArgsConstructor;
import org.springframework.ws.server.endpoint.annotation.Endpoint;
import org.springframework.ws.server.endpoint.annotation.PayloadRoot;
import org.springframework.ws.server.endpoint.annotation.RequestPayload;
import org.springframework.ws.server.endpoint.annotation.ResponsePayload;

import javax.xml.namespace.QName;

@Endpoint

public class PaymentValidationSoapAdapter {

    private static final String NAMESPACE_URI = "http://com/rbsg/soa/C040PaymentManagement/ArrValidationForPayment/V01/ServiceParameters/V01/";

    public PaymentValidationSoapAdapter(PaymentValidationPort paymentValidationPort) {
        this.paymentValidationPort = paymentValidationPort;
    }

    private final PaymentValidationPort paymentValidationPort;

    @PayloadRoot(namespace = NAMESPACE_URI, localPart = "validateArrangementForPayment")
    @ResponsePayload
    public ValidateArrangementForPaymentResponse validateArrangementForPayment(@RequestPayload ValidateArrangementForPaymentRequest request) {
        System.out.println("The request is here ") ;
    return paymentValidationPort.validateArrangementForPayment(request);
    }
/*
    @PayloadRoot(namespace = NAMESPACE_URI, localPart = "ValidateArrangementForPaymentRequest")
    @ResponsePayload
    public JAXBElement<ValidateArrangementForPaymentResponse> validateArrangementForPayment(@RequestPayload JAXBElement<ValidateArrangementForPaymentRequest> request) {
       // return paymentValidationPort.validateArrangementForPayment(request);
        // Implement your business logic here
        System.out.println("Endpoint called");
        // QName name = new QName( "validateArrangementForPaymentRequest");
        ValidateArrangementForPaymentResponse response = new ValidateArrangementForPaymentResponse();

        // Populate the response object
        ValidateArrangementForPaymentContent content = new ValidateArrangementForPaymentContent();
        ResponseHeader header = new ResponseHeader();
        header.setOperatingBrand("NBS");
        // header.set
        content.setResponseHeader(header);
        response.setResponse(content);
        // return response;
        return createJaxbElement(response, ValidateArrangementForPaymentResponse.class);
    }

    private <T> JAXBElement<T> createJaxbElement(T object, Class<T> clazz) {
        return new JAXBElement<>(new QName(clazz.getSimpleName()), clazz, object);
    }

    */
    // Handler for Customer Retrieval to be implemented later
}

-------------------------------------------------------------------------------------------

package com.rbs.bdd.util;

import com.rbs.bdd.generated.ValidateArrangementForPaymentResponse;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.Unmarshaller;
import java.io.InputStream;

public class XmlUtil {

    public static ValidateArrangementForPaymentResponse loadStaticResponse() {
        try {
            JAXBContext context = JAXBContext.newInstance(ValidateArrangementForPaymentResponse.class);
            Unmarshaller unmarshaller = context.createUnmarshaller();
            InputStream is = XmlUtil.class.getClassLoader().getResourceAsStream("static-response/response.xml");
            return (ValidateArrangementForPaymentResponse) unmarshaller.unmarshal(is);
        } catch (Exception e) {
            throw new RuntimeException("Failed to load static SOAP response", e);
        }
    }
}



-----------------------------------------------------------------------------
static-response.xml



<NS1:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:pdt="http://com/rbsg/soa/DataTypes/PrimitiveDataTypes/V03/" xmlns:NS1="http://schemas.xmlsoap.org/soap/envelope/">
   <NS1:Body>
      <NS2:validateArrangementForPaymentResponse xmlns:NS2="http://com/rbsg/soa/C040PaymentManagement/ArrValidationForPayment/V01/">
         <response>
            <responseHeader>
               <responseId>
                  <systemId>ESP</systemId>
                  <transactionId>3flS1c3fdecbf61bad42301f4e4d720211216055235691h</transactionId>
               </responseId>
               <operatingBrand>NWB</operatingBrand>
               <refRequestIds>
                  <systemId>RequestID</systemId>
                  <transactionId>123456789</transactionId>
               </refRequestIds>
               <cmdType>Response</cmdType>
               <cmdStatus>Succeeded</cmdStatus>
               <cmdNotifications>
                  <returnCode>0</returnCode>
                  <category>Success</category>
                  <description>Success</description>
                  <systemNotifications>
                     <returnCode>00</returnCode>
                     <category>Success</category>
                     <description>Success</description>
                     <processingId>
                        <systemId>International</systemId>
                     </processingId>
                  </systemNotifications>
                  <systemNotifications>
                     <returnCode>0</returnCode>
                     <category>Success</category>
                     <description>Success</description>
                     <processingId>
                        <systemId>BPP</systemId>
                     </processingId>
                  </systemNotifications>
               </cmdNotifications>
            </responseHeader>
            <validatedArrangement>
               <alternativeIdentifier>
                  <identifier>NXBJDGHFUSD01</identifier>
                  <context>
                     <schemeName>ArrangementEnterpriseIdType</schemeName>
                     <codeValue>InternationalCustomerAccountNumber</codeValue>
                  </context>
               </alternativeIdentifier>
               <alternativeIdentifier>
                  <identifier>1400104057015</identifier>
                  <context>
                     <schemeName>ArrangementEnterpriseIdType</schemeName>
                     <codeValue>IMMAS</codeValue>
                  </context>
               </alternativeIdentifier>
               <universalUniqueIdentifier>
                  <identifier>60730104057015</identifier>
                  <context>
                     <schemeName>ArrangementEnterpriseIdType</schemeName>
                     <codeValue>UKBasicBankAccountNumber</codeValue>
                  </context>
               </universalUniqueIdentifier>
               <name>VUWDL LFTN EWO UBI I/S</name>
               <accountingUnits>
                  <status>
                     <schemeName>AccountingUnitStatus</schemeName>
                     <codeValue>International - Unrestricted</codeValue>
                  </status>
               </accountingUnits>
               <managingOrganizationUnit>
                  <hasForName>
                     <nameText>NWB NON EURO/STERLING IBAN S/CODE</nameText>
                  </hasForName>
                  <parentOrganization>
                     <alternativeIdentifier>
                        <identifier>278</identifier>
                        <context>
                           <schemeName>OrganizationEnterpriseIdType</schemeName>
                           <codeValue>BankIdentifier</codeValue>
                        </context>
                        <extendedProperties xsi:type="pdt:Property">
                           <string>NAT WEST BANK PLC</string>
                           <name>BankShortName</name>
                        </extendedProperties>
                     </alternativeIdentifier>
                     <hasForName>
                        <nameText>NATIONAL WESTMINSTER BANK PLC</nameText>
                     </hasForName>
                     <parentOrganization>
                        <alternativeIdentifier>
                           <identifier>N</identifier>
                           <context>
                              <schemeName>OrganizationEnterpriseIdType</schemeName>
                              <codeValue>InstanceIdentifier</codeValue>
                           </context>
                        </alternativeIdentifier>
                     </parentOrganization>
                  </parentOrganization>
                  <sortCodeRegistration>
                     <extendedProperties>
                        <string>N</string>
                        <name>EuroSortcode</name>
                     </extendedProperties>
                     <lifeCycleStatus>
                        <status>
                           <schemeName>RegistrationLifecycleStatus</schemeName>
                           <codeValue>Effective</codeValue>
                        </status>
                     </lifeCycleStatus>
                     <isIssuedIn>
                        <universalUniqueIdentifier>
                           <identifier>Mainland GB</identifier>
                           <context>
                              <schemeName>GeographicAreaType</schemeName>
                              <codeValue>Region</codeValue>
                           </context>
                        </universalUniqueIdentifier>
                     </isIssuedIn>
                     <isTrainingBranch>false</isTrainingBranch>
                     <sortCodeRegistrationType>
                        <schemeName>SortCodeRegistrationType</schemeName>
                        <codeValue>None</codeValue>
                     </sortCodeRegistrationType>
                     <paymentServicesProviderType>
                        <schemeName>PaymentServicesProviderType</schemeName>
                        <codeValue>External</codeValue>
                     </paymentServicesProviderType>
                     <agencyIndicator>N</agencyIndicator>
                     <activeIndicator>A</activeIndicator>
                     <nonFPSettlementSortCode>0</nonFPSettlementSortCode>
                     <nonFPSettlementAccountNumber>0</nonFPSettlementAccountNumber>
                     <isCreditCardHOCA>false</isCreditCardHOCA>
                     <FPSettlementSortCode>0</FPSettlementSortCode>
                     <FPSettlementAccountNumber>0</FPSettlementAccountNumber>
                     <FPSettlementType>N</FPSettlementType>
                     <isFPEnabled>N</isFPEnabled>
                     <isInternalFunction>true</isInternalFunction>
                  </sortCodeRegistration>
               </managingOrganizationUnit>
               <switchingArrangement>
                  <switchingStatus>
                     <schemeName>AccountArrangementSwitchingStatus</schemeName>
                     <codeValue>Not Switching</codeValue>
                  </switchingStatus>
               </switchingArrangement>
               <currency>
                  <restrictedStatus>0</restrictedStatus>
                  <alphabeticCode>
                     <schemeName>CurrencyType</schemeName>
                     <codeValue>USD</codeValue>
                  </alphabeticCode>
               </currency>
               <contactPreferences>
                  <correspondenceDestinationPreference>
                     <schemeName>CorrespondenceDestinationPreferenceType</schemeName>
                     <codeValue>M</codeValue>
                  </correspondenceDestinationPreference>
               </contactPreferences>
            </validatedArrangement>
         </response>
      </NS2:validateArrangementForPaymentResponse>
   </NS1:Body>
</NS1:Envelope>






--------------------------

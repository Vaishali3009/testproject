package com.rbs.bdd.application.service;


import com.rbs.bdd.application.exception.SchemaValidationException;
import com.rbs.bdd.application.port.out.AccountValidationPort;
import com.rbs.bdd.generated.*;
import com.rbs.bdd.infrastructure.soap.model.Envelope;
import jakarta.xml.bind.JAXBContext;
import jakarta.xml.bind.JAXBElement;
import jakarta.xml.bind.Marshaller;
import jakarta.xml.bind.Unmarshaller;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.w3c.dom.Document;
import org.w3c.dom.Node;


import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.Source;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamSource;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathFactory;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.lang.Exception;

@Service
@RequiredArgsConstructor
public class AccountValidationService implements AccountValidationPort {

    @Override
    public void validateSchema(ValidateArrangementForPaymentRequest request) {
        // Schema is validated automatically by Spring WS
        System.out.println("Schema Validation ");
    }


    /**
     * Working
     *
     * @Override public ValidateArrangementForPaymentResponse validateBusinessRules(ValidateArrangementForPaymentRequest request) {
     * try {
     * System.out.println("Process started for business logic");
     * <p>
     * // Create JAXB context for the envelope wrapper class
     * JAXBContext context = JAXBContext.newInstance(Envelope.class);
     * Unmarshaller unmarshaller = context.createUnmarshaller();
     * <p>
     * // Load the static SOAP response
     * InputStream xml = getClass().getClassLoader().getResourceAsStream("static-response/response1.xml");
     * if (xml == null) {
     * throw new FileNotFoundException("File static-response/response1.xml not found.");
     * }
     * <p>
     * // Unmarshal the full SOAP envelope
     * Envelope envelope = (Envelope) unmarshaller.unmarshal(xml);
     * if(envelope==null || envelope.getBody()==null)
     * {
     * throw new SchemaValidationException("SOAP envelope or body is null");
     * <p>
     * }
     * ValidateArrangementForPaymentResponse response = envelope.getBody().getValidateArrangementForPaymentResponse();
     * <p>
     * if(response==null)
     * {
     * throw new SchemaValidationException("SOAP envelope or body is null");
     * <p>
     * }
     * ValidateArrangementForPaymentContent content=response.getResponse();
     * if(content ==null)
     * {
     * throw new SchemaValidationException("SOAP envelope or body is null");
     * <p>
     * }
     * ResponseHeader header= content.getResponseHeader();
     * <p>
     * // Business logic
     * String operatingBrand = request.getRequestHeader().getOperatingBrand();
     * if ("ALL".equalsIgnoreCase(operatingBrand)) {
     * ProcessingIdentifier responseId= header.getResponseId();
     * if(responseId==null)
     * {
     * responseId= new ProcessingIdentifier();
     * header.setResponseId(responseId);
     * <p>
     * }
     * responseId.setSystemId("ModifiedESP");
     * responseId.setTransactionId("ModifiedTxn123");
     * <p>
     * }
     * <p>
     * return response;
     * } catch (Exception e) {
     * throw new SchemaValidationException("Failed to process static response XML", e);
     * }
     * }
     **/
//    @Override
//    public Source validateBusinessRules(ValidateArrangementForPaymentRequest request) {
//        try {
//            JAXBContext context = JAXBContext.newInstance(Envelope.class);
//            Unmarshaller unmarshaller = context.createUnmarshaller();
//            Marshaller marshaller = context.createMarshaller();
//
//            InputStream xml = getClass().getClassLoader().getResourceAsStream("static-response/response1.xml");
//            Envelope envelope = (Envelope) unmarshaller.unmarshal(xml);
//
//            // Modify response
//            ValidateArrangementForPaymentResponse response = envelope.getBody().getValidateArrangementForPaymentResponse();
//            String brand = request.getRequestHeader().getOperatingBrand();
//            if ("ALL".equalsIgnoreCase(brand)) {
//                ResponseHeader header = response.getResponse().getResponseHeader();
//                ProcessingIdentifier id = header.getResponseId();
//                if (id == null) id = new ProcessingIdentifier();
//                id.setSystemId("ModifiedESP");
//                id.setTransactionId("ModifiedTxn123");
//                header.setResponseId(id);
//            }
//
//            // Marshal back to byte array and return as Source
//            ByteArrayOutputStream output = new ByteArrayOutputStream();
//            marshaller.marshal(envelope, output);
//            ByteArrayInputStream input = new ByteArrayInputStream(output.toByteArray());
//            return new StreamSource(input);
//
//        } catch (Exception e) {
//            throw new SchemaValidationException("Unable to process SOAP response", e);
//        }
//    }



        @Override
        public Source validateBusinessRules(ValidateArrangementForPaymentRequest request) {
            try {
                InputStream xml = getClass().getClassLoader().getResourceAsStream("static-response/response1.xml");
                if (xml == null) {
                    throw new SchemaValidationException("response1.xml not found in classpath");
                }

                DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
                factory.setNamespaceAware(true);
                DocumentBuilder builder = factory.newDocumentBuilder();
                Document doc = builder.parse(xml);

                XPath xpath = XPathFactory.newInstance().newXPath();

                // Update systemId
                Node systemId = (Node) xpath.evaluate(
                        "//*[local-name()='responseId']/*[local-name()='systemId']", doc, XPathConstants.NODE);
                if (systemId != null) systemId.setTextContent("ModifiedESP");

                // Update transactionId
                Node transactionId = (Node) xpath.evaluate(
                        "//*[local-name()='responseId']/*[local-name()='transactionId']", doc, XPathConstants.NODE);
                if (transactionId != null) transactionId.setTextContent("ModifiedTxn123");

                return new DOMSource(doc);

            } catch (Exception e) {
                throw new SchemaValidationException("Error processing response XML", e);
            }
        }
    }




--------------------------------------------------------------------------------------











   @PayloadRoot(namespace = NAMESPACE_URI, localPart = "validateArrangementForPayment")
    @ResponsePayload
    public Source validateArrangementForPayment(@RequestPayload ValidateArrangementForPaymentRequest request) {
        System.out.println("The request is here ") ;

      //  ValidateArrangementForPaymentRequest request= requestElement.getValue();
      //  return  paymentValidationPort.validateArrangementForPayment(request);
        return paymentValidationPort.validateArrangementForPayment(request);
         }
